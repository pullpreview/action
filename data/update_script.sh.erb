#!/bin/bash

set -e
set -o pipefail

APP_TARBALL="$1"
APP_PATH="<%= locals.remote_app_path %>"
PULLPREVIEW_LAUNCH_COMMAND="<%= locals.custom_launch_command %>"
PULLPREVIEW_ENV_VARS="<%= locals.custom_env_vars %>"
PULLPREVIEW_ENV_FILE="/etc/pullpreview/env"

lock_file="/tmp/update.lock"
cleanup() {
  rm -f "$lock_file"
  rm -f "$APP_TARBALL"
}

trap cleanup EXIT INT TERM

if [ -f "$lock_file" ]; then
  echo "Previous operation in progress. Waiting for at most 20min before proceeding..."

  for i in {1..240}; do
    sleep 5
    if [ ! -f "$lock_file" ]; then
      break
    fi
    echo "Waiting..."
  done
fi

if [ -f "$lock_file" ]; then
  echo "Previous operation considered in error. Forcing new operation to start..."
  lock_cleanup
fi

exec 100>$lock_file || exit 1
echo -n "Acquiring lock before proceeding... "
flock -n 100 || exit 1
echo "OK"

sudo chown -R ec2-user.ec2-user "$(dirname $PULLPREVIEW_ENV_FILE)"

if [ -f "$PULLPREVIEW_ENV_FILE" ]; then
  PULLPREVIEW_FIRST_RUN=false
  rm -f "$PULLPREVIEW_ENV_FILE"
else
  PULLPREVIEW_FIRST_RUN=true
fi

echo 'PULLPREVIEW_PUBLIC_DNS=<%= locals.public_dns %>' >> $PULLPREVIEW_ENV_FILE
echo 'PULLPREVIEW_PUBLIC_IP=<%= locals.public_ip %>' >> $PULLPREVIEW_ENV_FILE
echo 'PULLPREVIEW_URL=<%= locals.url %>' >> $PULLPREVIEW_ENV_FILE
echo "PULLPREVIEW_FIRST_RUN=$PULLPREVIEW_FIRST_RUN" >> $PULLPREVIEW_ENV_FILE

if [ -n "${PULLPREVIEW_ENV_VARS}" ] ; then
while read -d, -r pair; do
  IFS='=' read -r key val <<<"$pair"
  echo "$key=$val" >> $PULLPREVIEW_ENV_FILE
done <<<"$PULLPREVIEW_ENV_VARS,"
fi

set -o allexport
source $PULLPREVIEW_ENV_FILE
set +o allexport

cd /

sudo rm -rf "/tmp$APP_PATH"
sudo mkdir -p "$APP_PATH" "/tmp$APP_PATH"
sudo chown -R ec2-user.ec2-user "$APP_PATH" "/tmp$APP_PATH"
tar xzf "$1" -C "/tmp$APP_PATH"
rsync -auz "/tmp$APP_PATH" / --remove-source-files --delete

cd "$APP_PATH"

if ! /tmp/pre_script.sh ; then
  echo "Failed to run the pre-script"
  exit 1
fi

if [ -n "${PULLPREVIEW_LAUNCH_COMMAND}" ] ; then
  echo "Command to be executed: $PULLPREVIEW_LAUNCH_COMMAND"
  bash -c "$PULLPREVIEW_LAUNCH_COMMAND" ; exit $?
fi

pull() {
  docker-compose <%= locals.compose_files.map{|f| ["-f", f.inspect]}.flatten.join(" ") %> pull -q
}

# pulling images sometimes result in 'unexpected EOF', so retry at most 5 times
for i in {1..5}; do
  if pull; then break ; fi
done

docker-compose <%= locals.compose_files.map{|f| ["-f", f.inspect]}.flatten.join(" ") %> up \
	--build \
	--remove-orphans \
	-d

sleep 10
docker-compose <%= locals.compose_files.map{|f| ["-f", f.inspect]}.flatten.join(" ") %> logs --tail 1000
